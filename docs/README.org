#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: documentation
#+AUTHOR: Andrew M Davis, PhD
#+EMAIL: @reconmater:matrix.org
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.13)
#+FILETAGS: æ°—, ki, comp, repo, doc
Objective: [[https://en.wikipedia.org/wiki/Documentation][documentation]]
* Introduction
Documentation is critical to ensure our research methodology is
completely transparent and understandable to those that consume it.
Without a clear explanation of our procedures, the [[../results/README.org][results]] themselves
are meaningless.

The quality of the documentation is only as good as the quality of the
tools used to produce it. To reduce potential sources of bias between
the user and the text, the chain of information flow from the filetype
to the user passes through free and open-source software.
* Tools
The following tools were selected to introduce a component of temporal
control into the code development process.
** [[https://git-scm.com/][git]]
A very good [[https://en.wikipedia.org/wiki/Version_control][version control system]].

One of the primary reasons to use [[https://plaintextproject.online/][plain text]] in this code is to allow
the ability to track [[https://en.wikipedia.org/wiki/Differential_(mathematics)][differential]] changes in the routine.

Keeping everything of this under version control makes everyone's life
so much easier by ensuring both transparency and accountability. In
generating [[https://en.wikipedia.org/wiki/Knowledge][knowledge]], this quality is important in mitigating the [[https://en.wikipedia.org/wiki/Bias][bias]]
of the [[https://en.wikipedia.org/wiki/Observer_(physics)][observer]].

Here are some [[file:resources/git.org][resources]] for learning how to use git.

*** [[https://datasift.github.io/gitflow/IntroducingGitFlow.html][gitflow]]
 For our work flow, the `master` branch will contain the stable
 version of the code. Code in this branch should be fully tested and
 viable to produce publication-level results.

 If developing a new feature or modifying an aspect of the code,
 please create a new branch `git checkout -b feature_name` off of the
 `develop` branch. Once the code has been tested and is working, merge
 it back into master. Too many sub branches becomes confusing.

 Finally *NEVER* modify the git tree history once it has been pushed
 to the server repository. This will mess with everyone's local
 repositories. Modify commit history on your local branch between the
 server version and when you commit is fine as long as you know what
 you are doing. If you are unsure, please ask for help.
** [[https://www.gnu.org/software/emacs/][emacs]]
I'll share with you what I can. Devel into the [[file:docs/README.org][docs]].

#+begin_quote
Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.

Neal Stephenson, "In the Beginning was the Command Line"
#+end_quote

** [[http://www.andrewmichaeldavis.com/emacs/lprog/org/web/2016/03/26/bring-org-to-the-web/][org-mode]]
You just have to use org. No other way around it.

This page. Every page.

Read ([[https://orgmode.org/][RTFM]]) through the links and examples that are sourced throughout
that entry. The site hosting the blog is done entirely in org-mode.

Solve the tower of [[https://orgmode.org/worg/org-contrib/babel/][babel]].
* Code Compliance
In the interest of readability and good [[https://en.wikipedia.org/wiki/Standard_operating_procedure][SOP]], the code is in the
process of being updated to conform with [[https://www.python.org/dev/peps/pep-0008/][PEP8]] guidelines. This is the
standard on all major python projects and will serve us well.

PEP 8 syntax checkers exist for most major editors. For the *nix crowd
here are two examples.

- [[http://elpy.readthedocs.org/en/latest/ide.html#syntax-checking][Emacs]]
- [[http://www.vim.org/scripts/script.php?script_id=2914][Vim]]
** Documentation
To improve the interactive interface in IPython, every python method
should have a docstring. If nothing else, a short description should
be added. For more elaborate methods and classes, the docstring should
include flags in the [[http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html#pythonblocks][doxygen format for python]]. This makes the doxygen
generated documentation more useful to us as well. Please make sure
new methods are correctly documented and feel free to add to any
methods/classes that are missing their documentation.
